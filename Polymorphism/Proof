POLYMORPHISM
* The word poly means many and morphism means forms, so one function has many forms;
* In programming for example one interface has multiple implementations;
* Two types
   -> Compile-time Polymorphism
   -> Runtime Polymorphism

->Compile-Time Polymophism
*It is also know as static binding;
*These bindings are resolved during the compilation;
*The compiler determines which method call to bind with which method definition based on the number of arguments and type and othe factors;
*compiler optimes the code which makes the compiletime polymorphism faster;
*The optimization can be removing the unused codes,constatnt folding,method inlineing is 
 involves replacing the method call with the actual code of the method. This process aims 
 to reduce the overhead associated with method calls.;
*The compiler deducts the error in the compilation time; 
 Example of compile time polymorphism is method overload;
 *Method overloading is a feature in object-oriented programming languages 
that allows a class to define multiple methods with the same name but with different parameters.
 *In other words, in a class, you can have multiple methods that share the same name 
but differ in the type, number, or order of their parameters.
public class Main{
    public void fun(int a,int b){
        System.out.println("2 arguments");
    }
    public void fun(int a){
        System.out.println("1 argument");
    }
    public static void main(String args[]){
        Main m = new Main();
        m.fun(1);
        m.fun(1,2);
    }
}
The binding is done using the number of method argument with those methods;

->Runtime Polymorphism
*It is also called as Dynamic polymorphism;
*The function call to the overriden method is resolved during runtime;
*The type of the object is determined during the run time , the object type is considered not the referencd type as base class;
 Example : Overriden Method

*The child class uses the @Override annotation to override its superclass;
*The base class has a internal annotation called virtual method which helps its child class to override the methods of this class;
*To Override a method the signature of the base class method and child class method must be same ,only the definition differs;

 class A {
    public void fun(int a, int b) {
        System.out.println("Class A");
    }

    public void fun(int a) {
        System.out.println("1 argument");
    }
}
class B extends A{
    @Override
    public void fun(int a,int bb){
        System.out.println("class B");
    }
    public void d(){
        System.out.println("class B fun");
    }
}
public class Main {
    public static void main(String args[]) {
        A m = new B();
        m.fun(1,1);
        ((B)m).d();
    }
}

*We have to use cast to use the methods of the non-overriden child class;
*The object is A here , the refernce is not taken;
